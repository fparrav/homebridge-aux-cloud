name: Release

on:
  release:
    types:
      - published

env:
  YARN_CHECKSUM_BEHAVIOR: update

jobs:
  publish:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.14.0'
          cache: 'yarn'
          registry-url: 'https://registry.npmjs.org'

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: yarn install --immutable

      - name: Set package version from tag
        env:
          RELEASE_TAG: ${{ github.event.release.tag_name }}
        run: |
          set -euo pipefail
          if [ -z "$RELEASE_TAG" ]; then
            echo "Release tag is not available." >&2
            exit 1
          fi

          VERSION="${RELEASE_TAG#v}"
          if [ -z "$VERSION" ]; then
            echo "Derived version from tag is empty." >&2
            exit 1
          fi

          VERSION="$VERSION" node <<'EOF'
const fs = require('fs');
const path = require('path');

const version = process.env.VERSION;
if (!version) {
  throw new Error('VERSION environment variable is not set.');
}

const pkgPath = path.resolve('package.json');
const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf8'));

if (pkg.version === version) {
  console.log(`package.json already at version ${version}`);
} else {
  pkg.version = version;
  fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2) + '\n');
  console.log(`Updated package.json to version ${version}`);
}
EOF

      - name: Build
        run: yarn build

      - name: Detect npm dist-tag
        id: dist_tag
        run: |
          set -euo pipefail
          TARGET_BRANCH="${{ github.event.release.target_commitish }}"
          if [ -z "$TARGET_BRANCH" ]; then
            echo "Unable to detect target branch for release." >&2
            exit 1
          fi

          LOWER_BRANCH=$(echo "$TARGET_BRANCH" | tr '[:upper:]' '[:lower:]')

          case "$LOWER_BRANCH" in
            main|master)
              DIST_TAG="latest"
              ;;
            beta|beta/*)
              DIST_TAG="beta"
              ;;
            *)
              if [[ "$LOWER_BRANCH" =~ ^[0-9a-f]{40}$ ]]; then
                DIST_TAG="next"
              else
                SANITIZED=$(echo "$LOWER_BRANCH" | tr '/ ' '-')
                DIST_TAG="${SANITIZED}"
              fi
              ;;
          esac

          echo "Target branch: $TARGET_BRANCH"
          echo "Dist-tag: $DIST_TAG"
          echo "dist_tag=$DIST_TAG" >> "$GITHUB_OUTPUT"

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TAG: ${{ steps.dist_tag.outputs.dist_tag }}
          REGISTRY_URL: 'https://registry.npmjs.org'
        run: |
          if [ -z "$NODE_AUTH_TOKEN" ]; then
            echo "NPM_TOKEN secret is not available. Skipping publish." >&2
            exit 1
          fi

          umask 077
          mkdir -p "$HOME/.npm"
          printf "//registry.npmjs.org/:_authToken=%s\n" "$NODE_AUTH_TOKEN" > "$HOME/.npmrc"

          npm publish --access public --tag "$NPM_TAG"
